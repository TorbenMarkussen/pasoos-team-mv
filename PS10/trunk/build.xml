<!-- Build file for the PS10 Pay Station case study.
     
     Parts from the book "Flexible, Reliable Software"
     2010 by CRC Press
     Author: 
     Henrik B Christensen 
     Department of Computer Science
     University of Aarhus
-->
<project name="PayStation" default="help" basedir=".">
    
  <property name="source-directory" value="src"/>
  <property name="test-source-directory" value="test"/>
  <property name="build-directory" value="build"/>
  <property name="javadoc-directory" value="javadoc"/>
  <property name="resources" value="res" />

  <property name="junit-jar" value="lib/junit-4.4.jar"/>
  <property name="lcd-jar" value="lib/lcd.jar"/>

  <path id="class-path">
    <pathelement location="${build-directory}"/>
    <pathelement location="${junit-jar}"/>
    <pathelement location="${lcd-jar}"/> 
  </path>

  <target name="help">
    <echo>
Pay station build management.
  Targets:
    build-src:     Builds production code.
    test:          JUnit test production code.
    clean:         Removes all bytecode.
    javadoc:       Generate JavaDoc.

    gui:           Execute a single GUI based pay station.

  Exercise Target:

    sc1:           Monitor four pay stations scenario

   Partly from the book "Flexible, Reliable Software"
   Published 2010 by CRC Press
   Author: 
     Henrik B Christensen 
     Department of Computer Science
     University of Aarhus
    </echo>
  </target>

  <target name="clean">
    <delete dir="${build-directory}"/>
    <delete dir="${javadoc-directory}"/>
  </target>

  <target name="prepare">
    <mkdir dir="${build-directory}"/>
    <mkdir dir="${javadoc-directory}"/>
  </target>

  <!-- === RESOURCE COPYING === -->
  <target name="copy_resources" depends="prepare">
    <copy todir="${build-directory}" >
      <fileset dir="${resources}">
	<include name="java.policy"/>
      </fileset>
    </copy>
  </target>

  <target name="build-src" depends="prepare">
    <javac srcdir="${source-directory}"
	   destdir="${build-directory}"
	   includeAntRuntime="no"
	   debug="yes">
      <classpath refid="class-path"/>
    </javac>
  </target>

  <target name="build-test" depends="build-src">
    <javac includeantruntime="false" srcdir="${test-source-directory}"
        destdir="${build-directory}"
        includeAntRuntime="no"
        debug="yes">
      <classpath refid="class-path"/>
    </javac>
  </target>

  <target name="build-all" depends="build-src,build-test"/>
  
  <target name="test"  depends="build-all">
    <java classname="org.junit.runner.JUnitCore">
      <arg value="paystation.server.TestAll"/>
      <classpath refid="class-path"/>
    </java>
  </target>

  <target name="javadoc" depends="prepare">
    <javadoc
      packagenames="paystation.*"
      destdir="${javadoc-directory}"
      sourcepath="${source-directory}"
      windowtitle="Pay station system">
      
      <classpath refid="class-path"/>
    </javadoc>
  </target>
  

  <!-- Execute the GUI operating the PayStation interface as facade -->
  <target name="gui" depends="build-all">
    <java classname="paystation.server.view.PayStationGUI" fork="yes">
      <classpath refid="class-path"/>
    </java>
  </target>
 
  <!-- Run Scenario 1 that supervise a number of pay stations. -->
  <target name="sc1" depends="build-all">
    <java fork="yes" classname="paystation.scenario.Scenario1">
      <classpath> 
      	<path refid="class-path"/> 
      </classpath>
    </java>      
  </target>

  <!-- Run Scenario 1 that supervise a number of pay stations. -->
  <target name="runGUI" depends="build-all">
    <echo> "file:///${basedir}/${build-directory}/" </echo>
    <java spawn="true" fork="yes" classname="paystation.server.view.PayStationGUI">
        <classpath> 
            <path refid="class-path"/> 
        </classpath>
        <sysproperty key="java.security.policy" path="${build-directory}/java.policy"/>
        <sysproperty key="java.rmi.server.hostname" value="localhost"/>
        <sysproperty key="java.rmi.server.codebase" value="file:///${basedir}/${build-directory}/"/>
        <arg value="PS1"/>
    </java>      
    <java spawn="true" fork="yes" classname="paystation.server.view.PayStationGUI">
      <classpath> 
      	<path refid="class-path"/> 
      </classpath>
        <sysproperty key="java.security.policy" path="${build-directory}/java.policy"/>
        <sysproperty key="java.rmi.server.hostname" value="localhost"/>
        <sysproperty key="java.rmi.server.codebase" value="file:///${basedir}/${build-directory}/"/>
        <arg value="PS2"/>
    </java>      
    <java spawn="true" fork="yes" classname="paystation.server.view.PayStationGUI">
      <classpath> 
      	<path refid="class-path"/> 
      </classpath>
        <sysproperty key="java.security.policy" path="${build-directory}/java.policy"/>
        <sysproperty key="java.rmi.server.hostname" value="localhost"/>
        <sysproperty key="java.rmi.server.codebase" value="file:///${basedir}/${build-directory}/"/>
        <arg value="PS3"/>
    </java>      
  </target>

  <target name="runMonitor" depends="build-all">
    <java fork="yes" classname="paystation.client.StatusFrame">
      <classpath> 
      	<path refid="class-path"/> 
      </classpath>
        <sysproperty key="java.security.policy" path="${build-directory}/java.policy"/>
        <sysproperty key="java.rmi.server.hostname" value="localhost"/>
        <sysproperty key="java.rmi.server.codebase" value="file:///${basedir}/${build-directory}/"/>
        <arg value="PS1 PS2 PS3"/>
    </java>      
  </target>
  

</project>
